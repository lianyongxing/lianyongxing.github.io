(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{580:function(t,a,v){t.exports=v.p+"assets/img/8635B197-A3EC-4148-B7D7-71EE6DF071F6.82c3de60.png"},581:function(t,a,v){t.exports=v.p+"assets/img/B25D1D9C-5F48-431E-83B0-A44B7E5EACB2.17e9a4fe.png"},582:function(t,a,v){t.exports=v.p+"assets/img/D180C6D0-46E9-4B55-A3C8-F07FA3743918.55cfb25b.png"},583:function(t,a,v){t.exports=v.p+"assets/img/70737B88-DE66-40F0-96F7-B38212010469.64223a4f.png"},584:function(t,a,v){t.exports=v.p+"assets/img/0AE17272-4E12-40A1-A4C4-525ED0538763.8cb4a9ff.png"},585:function(t,a,v){t.exports=v.p+"assets/img/15908A40-2006-4004-AA9D-07E1CA2AD011.617836eb.png"},586:function(t,a,v){t.exports=v.p+"assets/img/5BD63705-A529-40CE-94E7-293E1B203308.7748c94a.png"},721:function(t,a,v){"use strict";v.r(a);var i=v(44),_=Object(i.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"内存管理之三"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#内存管理之三"}},[t._v("#")]),t._v(" 内存管理之三")]),t._v(" "),i("h2",{attrs:{id:"intel-cpu与linux内存管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#intel-cpu与linux内存管理"}},[t._v("#")]),t._v(" Intel CPU与Linux内存管理")]),t._v(" "),i("h3",{attrs:{id:"intel-cpu物理结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#intel-cpu物理结构"}},[t._v("#")]),t._v(" Intel CPU物理结构")]),t._v(" "),i("p",[t._v("x86计算机刚刚加电时，处在实模式（Real Mode）下")]),t._v(" "),i("h4",{attrs:{id:"实模式（real-mode）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实模式（real-mode）"}},[t._v("#")]),t._v(" 实模式（Real Mode）")]),t._v(" "),i("ul",[i("li",[t._v("20位地址总线：1M内存空间")]),t._v(" "),i("li",[t._v("地址表示方式：段地址（16位）：偏移地址（16位）")]),t._v(" "),i("li",[t._v("段地址低4位对齐（段地址低4位永远是0，所以凑出来20位）")]),t._v(" "),i("li",[t._v("实模式程序直接存取物理内存")])]),t._v(" "),i("h4",{attrs:{id:"保护模式（protect-mode）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#保护模式（protect-mode）"}},[t._v("#")]),t._v(" 保护模式（Protect Mode）")]),t._v(" "),i("p",[t._v("每个程序在自己的一个4G的空间内运行，程序间不会互相影响，保护了内核和进程。")]),t._v(" "),i("ul",[i("li",[t._v("32位地址空间：4G内存")]),t._v(" "),i("li",[t._v("支持多任务、任务切换、上下文保护")]),t._v(" "),i("li",[t._v("进程隔离：代码和数据安全")]),t._v(" "),i("li",[t._v("支持分段机制和分页机制")]),t._v(" "),i("li",[t._v("新的寄存器：\n"),i("ul",[i("li",[t._v("EAX～EDX：扩充到32位")]),t._v(" "),i("li",[t._v("CR0～CR4")]),t._v(" "),i("li",[t._v("GDTR")]),t._v(" "),i("li",[t._v("LDTR")]),t._v(" "),i("li",[t._v("IDTR")])])])]),t._v(" "),i("h4",{attrs:{id:"x86-cpu架构下的三种地址"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#x86-cpu架构下的三种地址"}},[t._v("#")]),t._v(" x86 CPU架构下的三种地址")]),t._v(" "),i("p",[t._v("逻辑地址：汇编语言（段：偏移）")]),t._v(" "),i("div",{attrs:{align:"center"}},[i("img",{attrs:{src:v(580),width:"60%",height:"60%",alt:"图片名称"}})]),t._v("\n三种地址转换流程\n"),i("div",{attrs:{align:"center"}},[i("img",{attrs:{src:v(581),width:"70%",height:"70%",alt:"图片名称"}})]),t._v(" "),i("h3",{attrs:{id:"intel-cpu段机制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#intel-cpu段机制"}},[t._v("#")]),t._v(" Intel CPU段机制")]),t._v(" "),i("h4",{attrs:{id:"段和段描述符"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#段和段描述符"}},[t._v("#")]),t._v(" 段和段描述符")]),t._v(" "),i("p",[t._v("段：一段连续内存")]),t._v(" "),i("p",[t._v("段描述符：8个字节，描述段的属性，段基址、段界限、段属性、段类型、是否存在内存等等"),i("br")]),i("div",{staticStyle:{float:"left"}},[i("br"),t._v(" "),i("img",{attrs:{src:v(582),width:"45%",height:"50%",alt:"图片名称"}}),i("br"),t._v(" "),i("img",{attrs:{src:v(583),width:"45%",height:"50%",alt:"图片名称"}}),i("br")]),i("p"),t._v(" "),i("p",[t._v("逻辑地址转换为线性地址流程："),i("br")]),i("div",{attrs:{align:"center"}},[i("br"),t._v(" "),i("img",{attrs:{src:v(584),width:"60%",height:"60%",alt:"图片名称"}}),i("br")]),i("p"),t._v(" "),i("h3",{attrs:{id:"linux页面机制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#linux页面机制"}},[t._v("#")]),t._v(" Linux页面机制")]),t._v(" "),i("h4",{attrs:{id:"intel分页"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#intel分页"}},[t._v("#")]),t._v(" Intel分页")]),t._v(" "),i("ul",[i("li",[t._v("Intel CPU的页：4KB")]),t._v(" "),i("li",[t._v("通过设置寄存器CR0的PG位开启分页功能")]),t._v(" "),i("li",[t._v("分页：线性地址->物理地址")]),t._v(" "),i("li",[t._v("在MMU（管理分页的硬件）中进行分页")])]),t._v(" "),i("h4",{attrs:{id:"linux分页"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#linux分页"}},[t._v("#")]),t._v(" Linux分页")]),t._v(" "),i("p",[t._v("在Linux中，采用三级页表结构。")]),t._v(" "),i("ul",[i("li",[t._v("普通页表实现时的问题：\n"),i("ul",[i("li",[t._v("32位OS（4G空间），每页4K，页表每个记录占4个字节")]),t._v(" "),i("li",[t._v("进程的页数：4G/4K = 1M个页")]),t._v(" "),i("li",[t._v("页表的记录数有：1M条记录")]),t._v(" "),i("li",[t._v("页表所占的内存：1M*4字节 = 4M")]),t._v(" "),i("li",[t._v("页表占页框数：4M/4K（页框每页4K） = 1K页框")])])])]),t._v(" "),i("p",[t._v("因此难以找到连续的1K个页框来存放页表；页表全部装入会过度消耗内存。")]),t._v(" "),i("p",[t._v("解决思路：")]),t._v(" "),i("ul",[i("li",[t._v("将4M的超大页表存储到离散的1K个页框中")]),t._v(" "),i("li",[t._v("仅将页表的部分内容调入内存")])]),t._v(" "),i("h5",{attrs:{id:"二级页表"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二级页表"}},[t._v("#")]),t._v(" 二级页表")]),t._v(" "),i("p",[t._v("把超大的页表（4M）以页为单位分成若干个小页表，存入离散的若干个页框中。"),i("br"),t._v("\n例如：将超大页表（4M）划分为1024个小页表，每个页表的大小为4K，此时1个小页表刚好占用1个页框。"),i("br"),t._v("\n为了管理小页表，设置一个叫页目录的表，记录每个小页表的存放位置（即页框号）。")]),t._v(" "),i("p",[t._v("Windows NT采用了二级页表的结构"),i("br")]),i("div",{attrs:{align:"center"}},[i("br"),t._v(" "),i("img",{attrs:{src:v(585),width:"70%",height:"70%",alt:"图片名称"}}),i("br")]),i("p"),t._v(" "),i("h6",{attrs:{id:"二级页表地址映射特点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二级页表地址映射特点"}},[t._v("#")]),t._v(" 二级页表地址映射特点")]),t._v(" "),i("ul",[i("li",[t._v("访问数据需要三次访问：页目录，页表，最终单元")]),t._v(" "),i("li",[t._v("页目录调入内存")]),t._v(" "),i("li",[t._v("页表按需调入主存")]),t._v(" "),i("li",[t._v("页面、页表、页目录大小都刚好4K（占1个页框）")])]),t._v(" "),i("h5",{attrs:{id:"linux三级页表结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#linux三级页表结构"}},[t._v("#")]),t._v(" Linux三级页表结构")]),t._v(" "),i("div",{attrs:{align:"center"}},[i("img",{attrs:{src:v(586),width:"70%",height:"70%",alt:"图片名称"}})]),t._v(" "),i("h3",{attrs:{id:"linux对段的支持"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#linux对段的支持"}},[t._v("#")]),t._v(" Linux对段的支持")]),t._v(" "),i("p",[t._v("Linux将4G的虚拟空间划分为两个部分，用户空间和内核空间。用户空间3G：从0到0xBFFFFFFF，内核空间1G：从0xC0000000到0xFFFFFFFF")]),t._v(" "),i("ul",[i("li",[t._v("Linux四个范围一样的段：0～0xFFFFFFFF（4G）")]),t._v(" "),i("li",[t._v("各段属性不同\n"),i("ul",[i("li",[t._v("内核段特权级为0")]),t._v(" "),i("li",[t._v("用户段特权级为3")])])]),t._v(" "),i("li",[t._v("作用\n"),i("ul",[i("li",[t._v("利用段机制隔离用户数据和系统数据（保留段的等级保护机制）")]),t._v(" "),i("li",[t._v("简化逻辑地址到线性地址的转换（可以直接将虚拟地址当作线性地址，两者完全一致）")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);