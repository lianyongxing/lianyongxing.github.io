(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{499:function(a,t,e){a.exports=e.p+"assets/img/docker.cfe270f8.png"},685:function(a,t,e){"use strict";e.r(t);var s=e(44),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"docker安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[a._v("#")]),a._v(" Docker安装")]),a._v(" "),s("p",[a._v("记录在ubuntu下搭建神器docker的环境～")]),a._v(" "),s("p",[s("img",{attrs:{src:e(499),alt:"cfe270f87a6fd65e20b2b13df9b4b4ee.png"}})]),a._v(" "),s("ol",[s("li",[a._v("如果之前安装过docker，先清理一下旧的文件")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo apt-get remove docker docker-engine docker.io containerd runc\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("更新一下apt包")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo apt-get update\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("安装下面的工具包，使apt能够通过https使用仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[a._v("添加Docker官方的GPG密钥")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[a._v("为apt添加docker稳定版的仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\n')])])]),s("ol",{attrs:{start:"6"}},[s("li",[a._v("再更新一下apt包")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo apt-get update\n")])])]),s("ol",{attrs:{start:"7"}},[s("li",[a._v("安装最新版docker ce")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo apt-get install -y docker-ce\n")])])]),s("ol",{attrs:{start:"8"}},[s("li",[a._v("查看是否安装成功，若安装成功会显示版本信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker -v\n")])])]),s("ol",{attrs:{start:"9"}},[s("li",[a._v("将用户加入docker组（之后每次使用时不用sudo命令）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo usermod -aG docker name #将当前用户加入docker组中，name是用户名\nsu - name   #重新登陆当前用户\ndocker ps -a    #查看所有容器\n")])])]),s("h2",{attrs:{id:"docker使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker使用"}},[a._v("#")]),a._v(" docker使用")]),a._v(" "),s("h3",{attrs:{id:"docker命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker命令"}},[a._v("#")]),a._v(" docker命令")]),a._v(" "),s("ul",[s("li",[a._v("查看docker信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker info\n")])])]),s("ul",[s("li",[a._v("查看docker帮助")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker --help\n")])])]),s("h3",{attrs:{id:"镜像命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[a._v("#")]),a._v(" 镜像命令")]),a._v(" "),s("ul",[s("li",[a._v("查看本机的所有镜像")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker images\n")])])]),s("ul",[s("li",[a._v("搜索dockerhub上的镜像")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker search\n")])])]),s("ul",[s("li",[a._v("下载某个镜像文件")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker pull nginx # pull后边跟镜像名字\n")])])]),s("ul",[s("li",[a._v("删除某个镜像")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rmi nginx\n")])])]),s("h3",{attrs:{id:"容器的命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器的命令"}},[a._v("#")]),a._v(" 容器的命令")]),a._v(" "),s("ul",[s("li",[a._v("运行一个容器")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run -it --name myubuntu ubuntu\n# -i是交互 -t是伪终端 --name是起的名字 -d\n是以守护模式后台运行，但是必须要有前台进程\n# -p是指定端口映射 8888:8080将内部的8080端口映射到外部的8888端口\n")])])]),s("ul",[s("li",[a._v("进入一个正在运行的容器（这种方法退出的时候不会结束容器）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker exec -it name /bin/bash  #进入容器，实际上是对容器执行后面的操作；也可以不进入容器，对容器进行操作\n")])])]),s("ul",[s("li",[a._v("进入一个正在运行的容器（推出的时候会结束容器）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker attach name  #进入容器中\n")])])]),s("ul",[s("li",[a._v("拷贝文件，从容器到主机中")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker cp name:文件路径 本机路径\n")])])]),s("h3",{attrs:{id:"镜像commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像commit"}},[a._v("#")]),a._v(" 镜像commit")]),a._v(" "),s("p",[a._v("在一个容器进行一顿操作，然后将它打包成一个自己的镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('docker commit -a="author" -m="comments" theimage myname/myimage # -a是作者名，-m是说明，之后是运行的镜像名，最后是自己起的名字\n')])])]),s("h3",{attrs:{id:"添加数据卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加数据卷"}},[a._v("#")]),a._v(" 添加数据卷")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run -it -v 主机文件夹:容器内文件夹 imagename\n")])])]),s("h2",{attrs:{id:"dockerfile使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile使用"}},[a._v("#")]),a._v(" DockerFile使用")]),a._v(" "),s("p",[a._v("编写一个简单的dockerFile文件")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('FROM centos #底层是centos，好比extends\nVOLUME ["/container01","/container02"]\n# 一出厂就挂了两个容器卷，如果运行的时候没有指定的话，会自动在/var目录里生成一个，具体用docker inspect 可以进行查看\nCMD echo "finish,------success01"\nCMD /bin/bash\n')])])]),s("p",[a._v("上面的dockerFile相当于")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run -it -v /host1:container01 -v /host2:/container02 centos /bin/bash\n")])])]),s("p",[a._v("之后将dockerFile构建为镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker build -f dockerFile -t namespace/mydocker .  # -f指的是dockerFile -t后跟的是名字\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);