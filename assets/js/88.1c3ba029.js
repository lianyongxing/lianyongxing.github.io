(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{682:function(t,v,_){"use strict";_.r(v);var e=_(44),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"dockerfile"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" DockerFile")]),t._v(" "),_("h2",{attrs:{id:"是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),_("p",[t._v("是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本")]),t._v(" "),_("p",[t._v("dockerFile中每条指令都会创建一个新的镜像层，并对镜像进行提交")]),t._v(" "),_("ul",[_("li",[t._v("构建三步骤\n"),_("ol",[_("li",[t._v("编写dockerfile")]),t._v(" "),_("li",[t._v("docker build")]),t._v(" "),_("li",[t._v("docker run")])])])]),t._v(" "),_("h3",{attrs:{id:"dockerfile示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile示例"}},[t._v("#")]),t._v(" DockerFile示例")]),t._v(" "),_("p",[t._v("下面是centos的dockerFile的代码：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('FROM scratch    # 真正的基础镜像，类似于java中的Object\nMAINTAINER The CentOS Project <cloud-ops@centos.org>    # 作者+邮箱\nADD c68-docker.tar.xz /\nLABEL name="CentOS Base Image" \\\n    vendor="CentOS" \\\n    license="GPLv2" \\\n    build-date="2016-06-02"\n\n# 一个说明\n# Default command\nCMD ["/bin/bash"]   #启动的时候的运行命令\n')])])]),_("h2",{attrs:{id:"保留字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#保留字"}},[t._v("#")]),t._v(" 保留字")]),t._v(" "),_("ul",[_("li",[t._v("From：基础镜像，当前编写的镜像是基于哪个镜像的")]),t._v(" "),_("li",[t._v("MAINTAINER：作者+作者的邮箱")]),t._v(" "),_("li",[t._v("RUN：容器构建时需要运行的命令")]),t._v(" "),_("li",[t._v("EXPOSE：暴露端口")]),t._v(" "),_("li",[t._v("WORKDIR：默认登陆的工作目录")]),t._v(" "),_("li",[t._v("ENV：在构建镜像过程中设置环境变量")]),t._v(" "),_("li",[t._v("ADD：将宿主机目录下的文件拷贝进镜像，并自解压")]),t._v(" "),_("li",[t._v('COPY：拷贝文件，COPY src dest或者COPY ["src","dest"]')]),t._v(" "),_("li",[t._v("VOLUME：保存数据和持久化，建立容器卷")]),t._v(" "),_("li",[t._v("CMD：指定一个容器启动时要运行的命令，dockerFIle中可以有多个cmd指令，但只有最后一个生效，CMD会被docker run之后的参数替换")]),t._v(" "),_("li",[t._v("ENTRYPOINT：指定一个容器启动时要运行的命令，ENTRYPOINT和CMD一样，都是在指定容器启动程序和参数")]),t._v(" "),_("li",[t._v("ONBUILD：当构建一个被继承的dockfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("BUILD")]),t._v(" "),_("th",[t._v("BOTH")]),t._v(" "),_("th",[t._v("RUN")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("FROM")]),t._v(" "),_("td",[t._v("WORKDIR")]),t._v(" "),_("td",[t._v("CMD")])]),t._v(" "),_("tr",[_("td",[t._v("MAINTAINER")]),t._v(" "),_("td",[t._v("USER")]),t._v(" "),_("td",[t._v("ENV")])]),t._v(" "),_("tr",[_("td",[t._v("COPY")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("EXPOSE")])]),t._v(" "),_("tr",[_("td",[t._v("ADD")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("VOLUME")])]),t._v(" "),_("tr",[_("td",[t._v("RUN")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("ENTRYPOINT")])]),t._v(" "),_("tr",[_("td",[t._v("ONBUILD")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v(".dockerignore")]),t._v(" "),_("td"),t._v(" "),_("td")])])])])}),[],!1,null,null,null);v.default=r.exports}}]);