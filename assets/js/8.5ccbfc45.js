(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{510:function(a,t,s){a.exports=s.p+"assets/img/step.deb32677.png"},511:function(a,t,s){a.exports=s.p+"assets/img/shortsteps.b6917927.png"},512:function(a,t,s){a.exports=s.p+"assets/img/CA0D8A94E8CE.2ce1f40a.png"},513:function(a,t,s){a.exports=s.p+"assets/img/7EF00418F0E1.3e36490f.png"},514:function(a,t,s){a.exports=s.p+"assets/img/09C0C71DE5BE.a45d81c4.png"},515:function(a,t,s){a.exports=s.p+"assets/img/B68492CBAF82.b0e0a66d.png"},516:function(a,t,s){a.exports=s.p+"assets/img/150F41A9FF9D.c593b0b5.png"},517:function(a,t,s){a.exports=s.p+"assets/img/9235176DCBFC.3b83d706.png"},518:function(a,t,s){a.exports=s.p+"assets/img/B1475BE84266.07cfb021.png"},519:function(a,t,s){a.exports=s.p+"assets/img/AB3C21835797.4cbda533.png"},689:function(a,t,s){"use strict";s.r(t);var e=s(44),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"rtmp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rtmp协议"}},[a._v("#")]),a._v(" RTMP协议")]),a._v(" "),e("h2",{attrs:{id:"理论知识介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理论知识介绍"}},[a._v("#")]),a._v(" 理论知识介绍")]),a._v(" "),e("h3",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),e("p",[a._v("目前流媒体直播主要使用rtmp协议进行推流和拉流，推流使用一些软件（例如OBS、ffmpeg等）将采集到的视频以数据流的形式推送到后端服务器上，拉流是从服务器端将数据流拉取到客户端进行解码和播放。")]),a._v(" "),e("p",[e("img",{attrs:{src:s(510),alt:"deb326771f7b3cc034aef5bfff7fda45"}})]),a._v(" "),e("p",[a._v("整个网络视频直播简化框图如下所示")]),a._v(" "),e("p",[e("img",{attrs:{src:s(511),alt:"b691792713926065b19b7b47441cc01b"}})]),a._v(" "),e("p",[a._v("在以上过程中，推拉流是视频播放的核心部分，而在推拉流过程中使用的协议即流媒体传输协议对传输质量的影响最大。")]),a._v(" "),e("p",[a._v("RTMP，全称 Real Time Messaging Protocol，即实时消息传送协议，是一种设计用来进行实时数据通信的网络协议。由Adobe 公司开发，是一种多媒体的复用和分组的应用层协议，带有时间信息的视频、音频和数据消息流，通过通信端之间进行传输，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信，支持该协议的软件包括Adobe Media Server/Ultrant Media Server/red5等。")]),a._v(" "),e("p",[a._v("RTMP 是目前主流的流媒体传输协议，广泛用于直播领域，可以说市面上绝大多数的直播产品都采用了这个协议。")]),a._v(" "),e("h3",{attrs:{id:"通信机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通信机制"}},[a._v("#")]),a._v(" 通信机制")]),a._v(" "),e("p",[a._v("RTMP 协议属于应用层协议，由底层的传输层协议 TCP 确保其稳定性和可靠性。在传输层协议 TCP 的链接建立完成后，基于应用层协议的Connection 链接，RTMP 协议需要客户端和服务器端通过握手完成后来建立，块尺寸、视频显示尺寸等控制信息会通过 Connection 链接来传输。")]),a._v(" "),e("p",[a._v("使用 RTMP 协议来传输流媒体数据的过程中，数据采集端会先把流媒体数据以消息的形式进行封装成消息，然后再把消息分割成更小的带有ID的消息块，最后将消息块通过TCP协议传输出去。"),e("br"),a._v("\n客户端通过TCP协议接收消息块数据，根据块中包含的信息 ID、信息的长度和数据的长度，把消息块重新组装成消息，然后再通过拆解封装对消息进行还原，这样就可以恢复出采集端发送的流媒体数据.")]),a._v(" "),e("p",[e("img",{attrs:{src:s(512),alt:"2ce1f40aa1dcaa508e57e84920fd66ad"}})]),a._v(" "),e("ul",[e("li",[a._v("握手过程")])]),a._v(" "),e("p",[a._v("RTMP 协议在使用时首先进行客户端与服务端的握手。客户端发出握手请求，服务端响应握手请求；握手完成之后建立网络连接；在建立了网络连接的基础上完成网络流的建立；只有在建立了网络流之后客户端才能进行文件的播放。")]),a._v(" "),e("p",[a._v("RTMP的握手通过互发消息块，其中客户端发送的消息块被指定为C0,C1,C2,服务端发送的消息块指定为S1,S2,S3，握手过程主要分为三个步骤，其握手过程如下所示："),e("br"),a._v("\n第一步 Client -> Server，内容是 C0+C1"),e("br"),a._v("\n第二步 Server -> Client，内容是 S0+S1+S2"),e("br"),a._v("\n第三步 Client -> Server，内容是 C2"),e("br"),a._v("\n1）客户端主动发送C0，C1；客户端必须等待S1到达才能发送C2; 必须等待S2到达才能发送其他数据；"),e("br"),a._v("\n2）服务端必须等待C0到达才能发送S0和S1；必须等待C1到达才能发送S2； 必须等待C2到达才能发送其他数据")]),a._v(" "),e("p",[e("img",{attrs:{src:s(513),alt:"3e36490fd6e53bf7840f2302369c9506"}})]),a._v(" "),e("h3",{attrs:{id:"rtmp分块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rtmp分块"}},[a._v("#")]),a._v(" RTMP分块")]),a._v(" "),e("p",[a._v("RTMP 协议是一个处于传输层 TCP/IP 协议之上的应用层协议，协议中的基本数据单元为 Message（消息）。在网络传输数据时，需要把消息再拆分成更小的单元Chunk（消息块），这样更有利于在不同的网络环境下顺利完成数据的传输。每个消息块有唯一的ID进行标识，这些块流通过 RTMP 协议进行传输，传输每个消息块必须等待上一消息块时发送完毕后才可以发送下一个块流，接收端将这些消息块按照块流ID又被重新合成了消息。")]),a._v(" "),e("ol",[e("li",[a._v("消息（Message）"),e("br"),a._v("\nMessage 主要由 Message 的头部和 Message 的体构成，而头部的数据又是整个 Message 的重中之重。Message 的头部由 MessageType、PayLoad Length、 TimeStamp、StreamId 四个部分组成：")])]),a._v(" "),e("p",[e("img",{attrs:{src:s(514),alt:"a45d81c422b1e9d2d050006a59d13d57"}})]),a._v(" "),e("ul",[e("li",[a._v("MessageTypeID：主要用于标记消息的类型。")]),a._v(" "),e("li",[a._v("PayLoadLength：用于标记消息的长度。")]),a._v(" "),e("li",[a._v("TimeStamp：消息的时间戳。")]),a._v(" "),e("li",[a._v("StreamID：标记该消息所属的流的 Id。")]),a._v(" "),e("li",[a._v("MessageBody：剩下的部分为消息的有效负载，其中包括的就是用户要发 送或者接收的实际内容，例如，可以是音频数据或者是视频数据。")])]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("消息块（Chunk）"),e("br"),a._v("\n消息块的首部消息头由三部分组成：用于识别消息块的基本块头，用于识别消息块负载的消息块头，以及当时间戳出现溢出后，出现的扩展时间戳。")])]),a._v(" "),e("p",[e("img",{attrs:{src:s(515),alt:"b0e0a66d96bd97125c7f4c174becd309"}})]),a._v(" "),e("ul",[e("li",[a._v("Basic Header ：基本块头，由 1 到 3 个字节组成，通过此字段对块流ID和块流类型进行编码。块流类型决定了消息头以什么格式进行编码。基本块头的长度是由块流 ID 来决定的，因为块流ID的长度是可变的。")]),a._v(" "),e("li",[a._v("Message Header ：消息块头，由 0、3、7、或者11个字节组成，消息块头是对正在发送的消息中的信息进行编码。块类型决定了消息块头的长度是由多少字节组成的。"),e("br"),a._v("\nExtended Timestamp：扩展时间戳，由0或4字节组成，是否有扩展时间戳取决于块消息头中的时间戳字段的增量。")]),a._v(" "),e("li",[a._v("Chunk Data :块头数据，当前块头的有效载荷，通过块头数据来定义的最大块的大小。")])]),a._v(" "),e("h2",{attrs:{id:"nginx-rtmp视频直播环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx-rtmp视频直播环境搭建"}},[a._v("#")]),a._v(" Nginx+RTMP视频直播环境搭建")]),a._v(" "),e("h3",{attrs:{id:"下载安装包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载安装包"}},[a._v("#")]),a._v(" 下载安装包")]),a._v(" "),e("ul",[e("li",[a._v("安装相关的编译环境")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo apt-get install build-essential libtool libpcre3 libpcre3-dev zlib1g-dev openssl libssl-dev\n")])])]),e("ul",[e("li",[a._v("下载nginx安装包")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 下载安装包\nsudo wget http://nginx.org/download/nginx-1.8.0.tar.gz \n# 解压安装包\ntar -zxvf nginx-1.8.0.tar.gz \n")])])]),e("ul",[e("li",[a._v("下载nginx-rtmp-module安装包")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 直接从github拉取\nsudo git clone https://github.com/arut/nginx-rtmp-module.git \n")])])]),e("p",[a._v("将解压后的文件夹放到以下目录中")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/usr/local/src\n")])])]),e("p",[a._v("此时src文件夹中存在两个文件夹分别是"),e("br"),a._v("\n进入nginx-1.8.0文件夹中，运行")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo ./configure --prefix=/usr/local/src/nginx  --add-module=../nginx-rtmp-module  --with-http_ssl_module\n")])])]),e("p",[a._v("之后编译")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo make && sudo make install\n")])])]),e("p",[a._v("之后进入/usr/local/src文件夹下，会多出一个新生成的nginx文件夹，进入nginx文件夹中，开启nginx服务器进行测试")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo ./sbin/nginx\n")])])]),e("p",[a._v("打开浏览器，输入localhost，若显示nginx欢迎页面，则开启成功。")]),a._v(" "),e("h3",{attrs:{id:"修改nginx配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改nginx配置文件"}},[a._v("#")]),a._v(" 修改nginx配置文件")]),a._v(" "),e("p",[a._v("在nginx配置文件中添加rtmp配置信息")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo nano /usr/local/src/nginx/conf/nginx.conf\n")])])]),e("p",[a._v("添加以下代码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("rtmp {\n    server {\n        listen 1935;#配置rtmp端口\n        chunk_size 4096;#配置信息块大小\n        \n        application mylive {# mylive是自己定义的一个名字\n            live on;\n        }\n    }\n}\n")])])]),e("p",[a._v("以上代表配置rtmp协议端口是1935，信息块大小是4096，应用的名字是mylive。")]),a._v(" "),e("h3",{attrs:{id:"obs推流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#obs推流"}},[a._v("#")]),a._v(" OBS推流")]),a._v(" "),e("p",[a._v("下载OBS软件"),e("br"),a._v(" "),e("a",{attrs:{href:"https://obsproject.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("OBS安装包下载"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("在设置中，进行推流服务器配置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("rtmp://192.168.1.100:1935/mylive\n")])])]),e("p",[e("img",{attrs:{src:s(516),alt:"c593b0b578bf0410d0a2e7a6971934c6"}})]),a._v(" "),e("p",[a._v("之后点击开始推流进行推流。")]),a._v(" "),e("p",[e("img",{attrs:{src:s(517),alt:"3b83d706d9b18ccc0fcddb5af9d7fc79"}})]),a._v(" "),e("h3",{attrs:{id:"拉流直播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拉流直播"}},[a._v("#")]),a._v(" 拉流直播")]),a._v(" "),e("p",[a._v("使用播放软件进行拉流播放视频，Windows系统下可以用VLC，MAC系统下可以用IINA，在此用IINA进行演示。")]),a._v(" "),e("p",[a._v("在IINA打开URL选项卡中进行服务器配置，"),e("br"),a._v(" "),e("img",{attrs:{src:s(518),alt:"07cfb0212b8842c380eb74a86682a1d3"}})]),a._v(" "),e("p",[a._v("之后经过几秒缓冲后，即可看到输出流画面，如下所示。"),e("br"),a._v(" "),e("img",{attrs:{src:s(519),alt:"4cbda5336b8895929b2acbd3f431d33a"}})]),a._v(" "),e("h3",{attrs:{id:"完成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完成"}},[a._v("#")]),a._v(" 完成")]),a._v(" "),e("p",[a._v("到此终于完成!!!! 🎉🎉🎉🎉🎉🎉🎉")])])}),[],!1,null,null,null);t.default=r.exports}}]);